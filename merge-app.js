// merge-app.js — collapse /js and /js/routes into app.js using your exact files
const fs = require('fs');
const path = require('path');

const OUT = 'app.js';

// 1) order: helpers → IA/fetch/cache → storage → router → player → route renderers
const ORDER_HINTS = [
  'js/ui', 'js/util', 'js/helpers', 'js/dom', 'js/format',
  'js/ia', 'js/fetch', 'js/cache', 'js/storage',
  'js/router', 'js/player',
  'js/routes',     // include all route files
  'js/'            // pick up anything left
];

// list .js files in a dir (routes is recursive, others flat)
function listJs(dir, recursive=false){
  if (!fs.existsSync(dir)) return [];
  let out = [];
  for (const name of fs.readdirSync(dir)) {
    const p = path.join(dir, name);
    const st = fs.statSync(p);
    if (st.isDirectory() && recursive) out = out.concat(listJs(p, true));
    else if (st.isFile() && p.endsWith('.js')) out.push(p);
  }
  return out;
}

let seen = new Set(), ordered = [];
for (const hint of ORDER_HINTS) {
  if (hint === 'js/routes') {
    for (const f of listJs('js/routes', true)) if(!seen.has(f)){ ordered.push(f); seen.add(f); }
  } else if (hint.endsWith('/')) {
    for (const f of listJs(hint, false)) if(!seen.has(f)){ ordered.push(f); seen.add(f); }
  } else {
    const dir = path.dirname(hint);
    if (fs.existsSync(dir)) {
      for (const f of listJs(dir, false)) {
        if (f.startsWith(hint) && !seen.has(f)) { ordered.push(f); seen.add(f); }
      }
    }
  }
}
// include stragglers in js/
for (const f of listJs('js', false)) if(!seen.has(f)){ ordered.push(f); seen.add(f); }

// concat, stripping ESM imports/exports
let out = `/* app.js (merged) — generated by merge-app.js */\n(function(){\n'use strict';\n\n`;
const STRIP_ESM = /^(?:\s*export\s+|import\s.+?;)/gm;
for (const file of ordered) {
  let src = fs.readFileSync(file, 'utf8');
  src = src.replace(STRIP_ESM, '').replace(/\bexport\s+default\b/g,'');
  out += `\n/* ==== ${file} ==== */\n${src.trim()}\n`;
}
out += `\n// If your original main used DOMContentLoaded listeners, they still run.\n})();\n`;

fs.writeFileSync(OUT, out, 'utf8');
console.log('Wrote', OUT, 'from', ordered.length, 'files');
